services:
  config:
    container_name: koku-config
    image: domschmidt/koku-config:latest
    restart: unless-stopped
    environment:
      - SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH-LOCATIONS=file:/config
    expose:
      - 8110
    volumes:
      - config-dir:/config

  gateway:
    container_name: koku-gateway
    image: domschmidt/koku-gateway:latest
    restart: unless-stopped
    depends_on:
      - config
    ports:
      - 443:8200
    environment:
      - FRONTEND_URL=http://frontend:1338/
      - BACKEND_URL=http://backend:8210/
      - CARDDAV_URL=http://carddav:8220/
      - CONFIG_IMPORT_SOURCE=configserver:http://config:8110
    volumes:
      - ssl-dir:/ssl # containing ssl_certificate.crt and ssl_certificate.key

  frontend:
    container_name: koku-frontend
    build:
      context: koku-frontend/
      dockerfile: Dockerfile
    image: domschmidt/koku-frontend
    restart: unless-stopped
    expose:
      - 1338
    depends_on:
      - backend
    environment:
      - NGINX_PORT=1338

  backend:
    container_name: koku-backend
    image: domschmidt/koku-backend:latest
    restart: unless-stopped
    expose:
      - 8210
    depends_on:
      - backend-db
      - config
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/koku
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=koku
      - KAFKA_BOOTSTRAP-SERVER=kafka:9092
      - SECURITY_JWT_SECRET=YhsO2nx4BtDN19ij42eB8YHZyYxYngfk4vAg8R8ziVswcEVcofhpiy2SD2Ingzi00VWxT5P6NE2mzdNkHVfaOg==
      - SECURITY_JWT_SIGNATURE-ALGORITHM=HS512
      - CONFIG_IMPORT_SOURCE=configserver:http://config:8110
    volumes:
      - uploads-dir:/data/uploads

  backend-db:
    container_name: koku-backend-db
    image: 'postgres:17.2'
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=koku
      - POSTGRES_DB=koku
    expose:
      - 5432

  carddav:
    container_name: koku-carddav
    image: domschmidt/koku-carddav:latest
    restart: unless-stopped
    depends_on:
      - config
    expose:
      - 1339
    environment:
      - KAFKA_BOOTSTRAP-SERVER=kafka:9092
      - CONFIG_IMPORT_SOURCE=configserver:http://config:8110

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    expose:
      - 9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller               # The node acts as both broker and controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093  # Ports for broker and controller
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092                  # External listener for clients
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER         # Listener name for inter-controller communication
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT  # Security protocol for listeners
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093    # Quorum voters for the controller in KRaft mode
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1           # Replication factor for the offsets topic
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1   # Replication factor for transaction logs
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1              # Minimum in-sync replicas for transactional logs
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0           # Initial delay before consumer group rebalancing
      KAFKA_NUM_PARTITIONS: 3                             # Default number of partitions for new topics

  init-kafka:
    image: apache/kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      ./opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
      echo -e 'Creating kafka topics'
      ./opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic customers --config cleanup.policy=compact

      echo -e 'Successfully created the following topics:'
      ./opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
      "

volumes:
  config-dir:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './config'
  uploads-dir:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './uploads'
  ssl-dir:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './ssl'